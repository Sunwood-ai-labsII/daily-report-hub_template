#!/bin/bash

# レポートハブに同期するスクリプト（プルリクエストフロー対応）

set -e

# 必要な環境変数をチェック
: ${GITHUB_TOKEN:?}
: ${REPORT_HUB_REPO:?}
: ${TARGET_DIR:?}
: ${REPO_NAME:?}
: ${DATE:?}
: ${WEEK_NUMBER:?}

# プルリクエストフロー設定（デフォルト値）
CREATE_PR=${CREATE_PR:-true}
AUTO_APPROVE=${AUTO_APPROVE:-false}
AUTO_MERGE=${AUTO_MERGE:-false}

# daily-report-hubは既にクローン済み

# README.mdをコピー
cp README.md "$TARGET_DIR/" 2>/dev/null || echo "# $REPO_NAME" > "$TARGET_DIR/README.md"

# 当日のアクティビティファイルをコピー（全て.mdファイル）
cp daily_commits.md "$TARGET_DIR/"
cp daily_cumulative_diff.md "$TARGET_DIR/"
cp daily_diff_stats.md "$TARGET_DIR/"
cp daily_code_diff.md "$TARGET_DIR/"
cp latest_diff.md "$TARGET_DIR/"
cp latest_code_diff.md "$TARGET_DIR/"
cp daily_summary.md "$TARGET_DIR/"

# 詳細メタデータを作成
COMMIT_COUNT=$(wc -l < daily_commits_raw.txt)
FILES_CHANGED=$(grep -c '^' daily_cumulative_diff_raw.txt 2>/dev/null || echo "0")

cat > "$TARGET_DIR/metadata.json" << EOF
{
  "repository": "$GITHUB_REPOSITORY",
  "date": "$DATE",
  "week_folder": "$WEEK_FOLDER",
  "week_number": $WEEK_NUMBER,
  "week_start_date": "$WEEK_START_DATE",
  "week_end_date": "$WEEK_END_DATE",
  "branch": "$GITHUB_REF_NAME",
  "latest_commit_sha": "$GITHUB_SHA",
  "sync_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "workflow_run": "$GITHUB_RUN_ID",
  "daily_commit_count": $COMMIT_COUNT,
  "daily_files_changed": $FILES_CHANGED,
  "has_activity": $([ $COMMIT_COUNT -gt 0 ] && echo "true" || echo "false"),
  "files": {
    "readme": "README.md",
    "summary": "daily_summary.md",
    "commits": "daily_commits.md",
    "file_changes": "daily_cumulative_diff.md",
    "stats": "daily_diff_stats.md",
    "code_diff": "daily_code_diff.md",
    "latest_diff": "latest_diff.md",
    "latest_code_diff": "latest_code_diff.md"
  }
}
EOF

# プルリクエストフローまたは直接プッシュ
cd daily-report-hub
git add .

if git diff --staged --quiet; then
  echo "No changes to commit"
  exit 0
fi

COMMIT_MESSAGE="📊 Weekly sync: $REPO_NAME ($DATE) - Week $WEEK_NUMBER - $COMMIT_COUNT commits"

if [ "$CREATE_PR" = "true" ]; then
  # プルリクエストフロー
  BRANCH_NAME="sync/$REPO_NAME-$DATE-$(date +%s)"
  
  echo "🔀 Creating pull request flow with branch: $BRANCH_NAME"
  
  # 新しいブランチを作成してチェックアウト
  git checkout -b "$BRANCH_NAME"
  
  # コミットしてプッシュ
  git commit -m "$COMMIT_MESSAGE"
  git push origin "$BRANCH_NAME"
  
  # プルリクエストを作成
  PR_BODY="## 📊 Daily Report Sync

**Repository:** \`$GITHUB_REPOSITORY\`
**Date:** $DATE
**Week:** $WEEK_NUMBER ($WEEK_START_DATE to $WEEK_END_DATE)

### 📈 Activity Summary
- **Commits:** $COMMIT_COUNT
- **Files Changed:** $FILES_CHANGED
- **Sync Time:** $(date '+%Y-%m-%d %H:%M:%S')

### 📋 Generated Files
- Daily summary report
- Commit details
- File changes
- Code differences
- Statistics

---
*Auto-generated by GitHub Actions*"

  echo "📝 Creating pull request..."
  PR_URL=$(curl -s -X POST \
    -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/repos/$REPORT_HUB_REPO/pulls" \
    -d "{
      \"title\": \"$COMMIT_MESSAGE\",
      \"body\": \"$PR_BODY\",
      \"head\": \"$BRANCH_NAME\",
      \"base\": \"main\"
    }" | jq -r '.html_url // empty')
  
  if [ -n "$PR_URL" ]; then
    echo "✅ Pull request created: $PR_URL"
    
    # プルリクエスト番号を取得
    PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]*$')
    
    # 自動承認が有効な場合
    if [ "$AUTO_APPROVE" = "true" ]; then
      echo "👍 Auto-approving pull request..."
      curl -s -X POST \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/$REPORT_HUB_REPO/pulls/$PR_NUMBER/reviews" \
        -d '{"event": "APPROVE", "body": "✅ Auto-approved by GitHub Actions"}' > /dev/null
      echo "✅ Pull request approved"
    fi
    
    # 自動マージが有効な場合
    if [ "$AUTO_MERGE" = "true" ]; then
      echo "🔀 Auto-merging pull request..."
      sleep 2  # APIの反映を待つ
      MERGE_RESULT=$(curl -s -X PUT \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/$REPORT_HUB_REPO/pulls/$PR_NUMBER/merge" \
        -d "{
          \"commit_title\": \"$COMMIT_MESSAGE\",
          \"merge_method\": \"squash\"
        }")
      
      if echo "$MERGE_RESULT" | jq -e '.merged' > /dev/null 2>&1; then
        echo "✅ Pull request merged successfully"
        
        # マージ後にブランチを削除
        curl -s -X DELETE \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$REPORT_HUB_REPO/git/refs/heads/$BRANCH_NAME" > /dev/null
        echo "🗑️ Branch $BRANCH_NAME deleted"
      else
        echo "⚠️ Failed to auto-merge. Manual merge required."
        echo "PR URL: $PR_URL"
      fi
    else
      echo "📋 Pull request created and ready for manual review: $PR_URL"
    fi
  else
    echo "❌ Failed to create pull request. Falling back to direct push."
    git checkout main
    git merge "$BRANCH_NAME"
    git push origin main
    git branch -d "$BRANCH_NAME"
    git push origin --delete "$BRANCH_NAME" 2>/dev/null || true
  fi
else
  # 直接プッシュフロー
  echo "⚡ Direct push mode"
  git commit -m "$COMMIT_MESSAGE"
  git push
  echo "✅ Successfully synced to report hub!"
fi